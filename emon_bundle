;5 December 2002 -- PDP-11 System Routines

; Print Character
; Input: R2 (low byte) = ASCII code of character
002000 110237
002002 177566
002004 105537
002006 177564
002010 100375
002012 000207

; Print number (in octal)
; Input: R4 = 16 bit number to print
002020 010046
002022 010146
002024 010246
002026 010400
002030 012701
002032 000005
002034 000257
002036 005002
002040 006100
002042 103001
002044 005202
002046 062702
002050 000060
002052 004737
002054 002000
002056 010402
002060 010100
002062 005300
002064 005400
002066 072200
002070 072200
002072 072200
002074 042702
002076 177770
002100 062702
002102 000060
002104 004737
002106 002000
002110 077116
002112 012602
002114 012601
002116 012600
002120 000207

; Print CR-LF
002130 010246
002132 012702
002134 000012
002136 004737
002140 002000
002142 012702
002144 000015
002146 004737
002150 002000
002152 012602
002154 000207

;Print address packet (address contents)
;In: R3 = address of packet to print
002160 010246
002162 010446
002164 010304
002166 004737
002170 002020
002172 012702
002174 000040
002176 004737
002200 002000
002202 011304
002204 004737
002206 002020
002210 004737
002212 002130
002214 012604
002216 012602
002220 000207

;Print String
;Input: R3 = pointer to string descriptor
002240 010246
002242 010346
002244 010446
002246 012304
002250 001405
002252 005002
002254 112302
002256 004737
002260 002000
002262 077405
002264 012604
002266 012603
002270 012602
002272 000207

;Read Character (blocking read)
;Output: R2 (low byte) = ASCII character read
002300 105737
002302 177560
002304 100375
002306 113702
002310 177562
002312 000207

;Read String (strips trailing CR/LF)
;Input: R3 = pointer to string descriptor
;       (R3) = maximum string length
;Output: (R3) = filled string descriptor
002330 010046
002332 010246
002334 010300 ; Configure extents (SP = max, SP + 2 = min)
002336 005200
002340 005200 
002342 010046
002344 011346
002346 060016

002350 004737  ; Read character
002352 002300

002354 120227
002356 000015
002360 001442  ; LF
002362 120227
002364 000012 
002366 001437  ; CR
002370 120227
002372 000010
002374 001405  ; BS
002376 120227
002400 000177 
002402 001003  ; not DEL
002404 012702  ; Convert DEL->BS
002406 000010
002410 005300

002412 020016  ; Upper extent
002414 003407  ; Bound OK
002416 011600  ; Enforce upper bound

002420 010246  ; Force cursor to stop
002422 012702
002424 000010
002426 004737
002430 002000
002432 012602

002434 020066  ; Lower extent
002436 000002
002440 002003  ; Bound OK
002442 016600  ; Enforce lower bound
002444 000002
002446 000406  ; Stop cursor motion

002450 004737  ; Print character
002452 002000

002454 120227
002456 000010
002460 001401
002462 110220
002464 000731  ; Bottom of loop

002466 166600  ; Compute length
002470 000002
002472 010013
002474 012600  ; Cleanup
002476 012600

002500 012602
002502 012600

002504 000207

; Compare string descriptors
; Input: R3 = Pointer to First string
;        R4 = pointer to second string
; Output: R1 = 0 if not the same
;              1 if R3 is substring of R4
;              2 if R4 is substring of R3
;              3 if strings are exactly equal
002520 010046
002522 010346
002524 010446

002526 011400  ; Initialize return value in R1
002530 012701  ; R3 > R4
002532 000002
002534 021314
002536 003007
002540 001404
002542 012701
002544 000001  ; R3 < R4
002546 011300
002550 000402
002552 012701  ; R3 = R4
002554 000003

002556 005203  ; Move R3 and R4 to start of data zone
002560 005203
002562 005204
002564 005204

002566 122324  ; Compare strings
002570 001402
002572 005001  ; Difference found, clear R1 and bail
002574 000401
002576 077005  ; Bottom of loop

002600 012604
002602 012603
002604 012600

002606 000207

; Convert String into 16-bit integer
; Input: R3 = string
; Output: R1 = number
002620 010046
002622 010246
002624 010446

002626 010300  ; Compute extents
002630 005200
002632 005200
002634 010046
002636 061316  ; R0 = low extent, (R6)=high extent
002640 005001  ; Clear R1
002642 012704  ; R4 = character counter
002644 000006

002646 112002  ; Read character from (R0)
002650 120227
002652 000060  ; '0'
002654 002416  ; Bail if less
002656 120227
002660 000067  ; '7'
002662 003013  ; Bail if greater
002664 020016
002666 003011  ; Bail if high extent hit
002670 162702  ; Remove ASCII bias
002672 000060
002674 006301  ; Shift result bits
002676 006301  ;  (This is done as 3 separate shifts for the
002700 006301  ;   benefit of pdp-11/03s)
002702 042702  ; Mask off low 3 bits
002704 177770 
002706 050201  ; OR bits into result
002710 077422  ; Bottom of loop

002712 012604  ; Remove high extent
002714 012604  ; Reinstate old register values
002716 012602
002720 012600
002722 000207

; Prompt user for numerical parameter
; Input: R3 = prompt string
; Output: R1 = value
002740 010246
002742 010346
002744 004737
002746 002130
002750 004737
002752 002240
002754 012703
002756 003002
002760 012713
002762 000010
002764 004737
002766 002330
002770 004737
002772 002620
002774 012603
002776 012602
003000 000207

;003002 xxxxxx  ; Buffer Space
;003004 xxxxxx
;003006 xxxxxx
;003010 xxxxxx
;003012 xxxxxx

;; Electronics Club Monitor for the PDP-11 (EMON)

;; Monitor Main
; Entry point = 001200
001200 012702
001202 000076 ; Prompt character
001204 004737
001206 002000
001210 012703
001212 001600 ; Command buffer
001214 012713
001216 000020
001220 004737
001222 002330
001224 012705
001226 005000 ; Command list
001230 012502 ; Length of list

001232 012546 ; Search command list
001234 012504
001236 004737
001240 002520
001242 032701
001244 000001
001246 001010
001250 012604
001252 077211

001254 012703
001256 001500  ; Bad command
001260 004737
001262 002240
001264 000137
001266 001200

001270 012600  ; Valid command
001272 004710
001274 000137
001276 001200

001500 000014 ; "?BAD CMD"
001502 006412
001504 041077
001506 042101
001510 041440
001512 042115
001514 006412

; Command Tables
004000 000004 ; "DUMP"
004002 052504
004004 050115
004006 000004 ; "LIST"
004010 044514
004012 052123
004014 000004 ; "DEPO"
004016 042504
004020 047520
004022 000004 ; "STRG"
004024 052123
004026 043522
004030 000004 ; "VECT"
004032 042526
004034 052103

005000 000005
005002 001000
005004 004000
005006 001400
005010 004006
005012 004100
005014 004014
005016 001100
005020 004022
005022 001150
005024 004030

;; Commands

; DUMP
001000 012703
001002 001050
001004 004737
001006 002740
001010 010104
001012 012703
001014 001062
001016 004737
001020 002740
001022 010403
001024 010104
001026 004737
001030 002130
001032 004737
001034 002160
001036 005203
001040 005203
001042 020304
001044 003772
001046 000207

001050 000007 ; "Start? "
001052 072123
001054 071141
001056 037564
001060 000040

001062 000005 ; "End? "
001064 067105
001066 037544
001070 000040

; STRG
001100 012703
001102 001134
001104 004737
001106 002740
001110 004737
001112 002130
001114 010103
001116 012713
001120 000100
001122 004737
001124 002330
001126 004737
001130 002130
001132 000207

001134 000011 ; "Address? "
001136 062101
001140 071144
001142 071545
001144 037563
001146 000040

; VECT
001150 012703
001152 001166
001154 004737
001156 002740
001160 004737
001162 002130
001164 000111

001166 000004 ; "Go? "
001170 067507
001172 020077

; LIST
001400 004737
001402 002130
001404 012705
001406 005000
001410 012502
001412 012503
001414 012503
001416 004737
001420 002240
001422 004737
001424 002130
001426 077207
001430 000207

; DEPO (Break out of enterring data by typing '.' on
; a line and pressing enter)
004100 012703
004102 004230 ; *"Start? "
004104 004737
004106 002740
004110 010105
004112 012703
004114 004242 ; *Input buffer
004116 004737
004120 002130

004122 010504 ; Print current address
004124 004737
004126 002020
004130 012702
004132 000040
004134 004737
004136 002000
004140 011504 ; Print old contents
004142 004737
004144 002020
004146 004737
004150 002000

004152 012713
004154 000010
004156 004737 ; Read user input
004160 002330

004162 011302
004164 001415 ; Bail if zero-length string
004166 010304
004170 005204
004172 005204

004174 122427 ; See if user wants to quit
004176 000056
004200 001407 ; Quit
004202 077204

004204 004737
004206 002620
004210 010125 ; Write word
004212 004737
004214 002130
004216 000741 ; * Bottom of loop

004220 004737
004222 002130
004224 000207

004230 000007 ; "Start? "
004232 072123
004234 071141
004236 037564
004240 000040

;004242 xxxxxx ; Input Buffer
;004244 xxxxxx
;004246 xxxxxx
;004250 xxxxxx
;004252 xxxxxx
